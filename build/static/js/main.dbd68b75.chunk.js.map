{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","contacts","onChange","value","defaultValue","map","contact","name","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","onSubmit","type","placeholder","event","target","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","tile","className","Object","values","index","TileList","tiles","AppointmentsPage","appointments","addAppointment","useState","length","e","preventDefault","ContactForm","setName","phone","setPhone","email","setEmail","ContactsPage","addContact","duplicate","setDuplicate","useEffect","undefined","find","App","setContacts","setAppointments","ROUTES","to","activeClassName","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbd68b75.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({ contacts, onChange }) => {\r\n  return (\r\n    <select onChange={onChange}>\r\n      <option key={-1} value=\"\" defaultValue={\"selected\"}>\r\n        Select a contact\r\n      </option>\r\n      {contacts.map((contact) => {\r\n        return (\r\n          <option key={contact.name} value={contact.name}>\r\n            {contact.name}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker } from \"../contactPicker/ContactPicker\";\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit,\r\n}) => {\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          value={title}\r\n          placeholder=\"Title\"\r\n          onChange={(event) => setTitle(event.target.value)}\r\n        />\r\n      </label>{\" \"}\r\n      <br></br>\r\n      <label>\r\n        <input\r\n          type=\"date\"\r\n          value={date}\r\n          placeholder=\"Date\"\r\n          onChange={(event) => setDate(event.target.value)}\r\n          min={getTodayString()}\r\n        />\r\n      </label>{\" \"}\r\n      <br></br>\r\n      <label>\r\n        <input\r\n          type=\"time\"\r\n          value={time}\r\n          placeholder=\"Time\"\r\n          onChange={(event) => setTime(event.target.value)}\r\n        />\r\n      </label>{\" \"}\r\n      <br></br>\r\n      <label>\r\n        <ContactPicker\r\n          value={contact}\r\n          contacts={contacts}\r\n          placeholder=\"Appointment with\"\r\n          onChange={(event) => setContact(event.target.value)}\r\n        />\r\n      </label>{\" \"}\r\n      <br></br>\r\n      <input type=\"submit\" value=\"add appointment\" />\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = ({ tile }) => {\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {/* Object.values(tile) generates the array of the tile objects values */}\r\n      {Object.values(tile).map((value, index) => (\r\n        <p key={index} className={`${index === 0 ? \"tile-title\" : \"tile\"}`}>{value}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from \"../tile/Tile\";\r\n\r\nexport const TileList = ({ tiles }) => {\r\n  return (\r\n    <div>\r\n      {tiles.map((tile, index) => (\r\n        <Tile key={index} tile={tile} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AppointmentForm } from \"../../components/appointmentForm/AppointmentForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const AppointmentsPage = ({\r\n  appointments,\r\n  contacts,\r\n  addAppointment,\r\n}) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n  const [title, setTitle] = useState(\"\");\r\n  const [contact, setContact] = useState(contacts.length > 0 ? contacts[0].name : \"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data  \r\n    */\r\n    addAppointment(title, contact, date, time);\r\n    setTitle(\"\");\r\n    setContact(\"\");\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm\r\n          contacts={contacts}\r\n          title={title}\r\n          setTitle={setTitle}\r\n          contact={contact}\r\n          setContact={setContact}\r\n          date={date}\r\n          setDate={setDate}\r\n          time={time}\r\n          setTime={setTime}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList tiles={appointments} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(event) => setName(event.target.value)}\r\n          placeholder=\"Name\"\r\n        />\r\n      </label>{\" \"}\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"tel\"\r\n          value={phone}\r\n          onChange={(event) => setPhone(event.target.value)}\r\n          placeholder=\"Phone\"\r\n        />\r\n      </label>{\" \"}\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(event) => setEmail(event.target.value)}\r\n          placeholder=\"Email\"\r\n        />\r\n      </label>{\" \"}\r\n      <br />\r\n      <input type=\"submit\" value=\"add contact\" />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!duplicate) {\r\n      addContact(name, phone, email);\r\n      setName(\"\");\r\n      setPhone(\"\");\r\n      setEmail(\"\");\r\n    }\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n  useEffect(() => {\r\n    const duplicateName = () => {\r\n      const found = contacts.find((contact) => contact.name === name);\r\n      if (found !== undefined) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n    if (duplicateName()) {\r\n      setDuplicate(true);\r\n    } else {\r\n      setDuplicate(false);\r\n    }\r\n  }, [name, contacts, duplicate]);\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n  const [contacts, setContacts] = useState([]);\r\n  const [appointments, setAppointments] = useState([]);\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n  const addContact = (name, phone, email) => {\r\n    setContacts([\r\n      ...contacts,\r\n      {\r\n        name: name,\r\n        phone: phone,\r\n        email: email,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const addAppointment = (title, contact, date, time) => {\r\n    setAppointments([\r\n      ...appointments,\r\n      {\r\n        title: title,\r\n        contact: contact,\r\n        date: date,\r\n        time: time,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n            {/* Add props to ContactsPage */}\r\n            <ContactsPage contacts={contacts} addContact={addContact} />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage\r\n              contacts={contacts}\r\n              appointments={appointments}\r\n              addAppointment={addAppointment}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}